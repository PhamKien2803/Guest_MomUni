import React, { useState, useEffect, useMemo, useRef, useCallback } from 'react';
import { Link as RouterLink, useParams } from "react-router-dom";

// MUI Components
import {
    createTheme, ThemeProvider, CssBaseline, AppBar, Toolbar, Typography,
    Button, Container, Box, Card, CardMedia, CardContent, Grid, Link,
    IconButton, Chip, TextField, MenuItem, Alert, Snackbar,
    Paper, Stack, Divider, useTheme, alpha, Pagination, Breadcrumbs,
    InputAdornment, List, ListItem, ListItemText, ListItemAvatar,
    Avatar, Rating // Th√™m Rating
} from '@mui/material';
import { LoadingButton } from '@mui/lab';

// MUI Icons
import {
    Menu as MenuIcon, ArrowForwardIos, FavoriteBorder,
    Restaurant, ChildCare, SelfImprovement, Psychology, LocalHospital,
    FamilyRestroom, Spa, School, Facebook, Instagram, Twitter,
    ChevronRight, Search as SearchIcon, AccessTime as TimeIcon,
    Visibility as ViewIcon, Person as PersonIcon, Category as CategoryIcon,
    CalendarToday as CalendarTodayIcon,
    Whatshot as TrendingIcon, NewReleases as NewIcon,
    FilterList as FilterListIcon, Send as SendIcon,
    Star as StarIcon,
    Comment as CommentIcon
} from '@mui/icons-material';
import { motion } from 'framer-motion';

// --- SETUP & THEME ---
const paletteConfig = {
    primary: { main: '#E5A3B3', light: '#F8C8D4', dark: '#BF8A9B' },
    secondary: { main: '#A0C4B8', light: '#C0D8D0', dark: '#7FA99F' },
    background: { default: '#FFF7F5', paper: '#FFFFFF' },
    text: { primary: '#4A4A4A', secondary: '#757575', disabled: '#BDBDBD' },
};

const elegantTheme = createTheme({
    palette: paletteConfig,
    typography: {
        fontFamily: '"Nunito Sans", sans-serif',
        h1: { fontFamily: '"Lora", serif', fontWeight: 700, fontSize: '2.6rem', color: paletteConfig.text.primary, lineHeight: 1.3, marginBottom: '0.5em' },
        h2: { fontFamily: '"Lora", serif', fontWeight: 700, fontSize: '2rem', color: '#3E2723', marginTop: '1.8em', marginBottom: '0.8em' },
        h3: { fontFamily: '"Lora", serif', fontWeight: 600, fontSize: '1.6rem', color: '#4E342E', marginTop: '1.5em', marginBottom: '0.6em' },
        h4: { fontFamily: '"Lora", serif', fontWeight: 600, fontSize: '1.4rem', color: '#5D4037' },
        h5: { fontFamily: '"Lora", serif', fontWeight: 600, fontSize: '1.2rem', color: '#4E342E' },
        h6: { fontWeight: 700, fontSize: '1.1rem', color: paletteConfig.text.primary },
        subtitle1: { fontSize: '1rem', lineHeight: 1.6, fontWeight: 400, color: paletteConfig.text.secondary },
        body1: { fontSize: '1rem', lineHeight: 1.8, color: paletteConfig.text.primary },
        body2: { fontSize: '0.9rem', lineHeight: 1.6, color: paletteConfig.text.secondary },
        caption: { fontSize: '0.875rem', color: alpha(paletteConfig.text.secondary, 0.9) }
    },
    components: {
        MuiButton: { styleOverrides: { root: { borderRadius: '8px', textTransform: 'none', fontWeight: 600, padding: '8px 22px', boxShadow: 'none' } } },
        MuiChip: { styleOverrides: { root: { borderRadius: '16px', fontWeight: 600, padding: '6px 12px', fontSize: '0.875rem' } } },
        MuiCard: {
            styleOverrides: {
                root: {
                    borderRadius: '16px',
                    boxShadow: '0 6px 18px rgba(0,0,0,0.07)',
                    transition: 'transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out',
                    '&:hover': {
                        transform: 'translateY(-6px)',
                        boxShadow: `0 10px 25px ${alpha(paletteConfig.primary.main, 0.15)}`,
                    },
                }
            }
        },
        MuiPaginationItem: {
            styleOverrides: {
                root: {
                    borderRadius: '8px',
                    '&.Mui-selected': {
                        backgroundColor: paletteConfig.primary.main,
                        color: 'white',
                        '&:hover': {
                            backgroundColor: paletteConfig.primary.dark,
                        }
                    },
                },
            },
        },
        MuiPaper: {
            styleOverrides: {
                root: {
                    borderRadius: '16px',
                    padding: '24px',
                }
            }
        },
        MuiTextField: {
            defaultProps: {
                variant: 'outlined',
                size: 'small',
            },
            styleOverrides: {
                root: {
                    '& .MuiOutlinedInput-root': {
                        borderRadius: '12px',
                        backgroundColor: alpha(paletteConfig.primary.main, 0.03)
                    }
                }
            }
        }
    },
});

const sectionVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.5, ease: "easeOut", staggerChildren: 0.1 } },
};
const itemVariants = {
    hidden: { opacity: 0, y: 15 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.4, ease: "easeOut" } },
};
const MotionBox = motion(Box);
const MotionPaper = motion(Paper);

// =================================================================
// D·ªÆ LI·ªÜU Tƒ®NH (STATIC DATA)
// =================================================================
const staticBlog = {
    _id: "6658b1f7d4b2e8a15b3c6f4a",
    slug: "kham-pha-ve-dep-mien-tay-song-nuoc",
    title: "Kh√°m Ph√° V·∫ª ƒê·∫πp Ti·ªÅm ·∫®n c·ªßa Mi·ªÅn T√¢y S√¥ng N∆∞·ªõc Cho M·∫π v√† B√©",
    content: `
        <p>Ch√†o c√°c m·∫π, h√¥m nay MomUni s·∫Ω c√πng c√°c m·∫π v√† b√© y√™u kh√°m ph√° m·ªôt h√†nh tr√¨nh ƒë·∫ßy m√†u s·∫Øc ƒë·∫øn v·ªõi mi·ªÅn T√¢y s√¥ng n∆∞·ªõc. ƒê√¢y kh√¥ng ch·ªâ l√† m·ªôt chuy·∫øn ƒëi, m√† c√≤n l√† c∆° h·ªôi ƒë·ªÉ c·∫£ gia ƒë√¨nh m√¨nh c√πng nhau t·∫°o n√™n nh·ªØng k·ª∑ ni·ªám ƒë√°ng nh·ªõ.</p>
        <img src="https://images.unsplash.com/photo-1506740717032-0818e79510e8?q=80&w=1200&auto=format&fit=crop" alt="M·∫π v√† b√© ng·∫Øm c·∫£nh s√¥ng n∆∞·ªõc mi·ªÅn T√¢y" />
        <h2>1. V√¨ sao n√™n ch·ªçn Mi·ªÅn T√¢y cho chuy·∫øn ƒëi c√πng b√©?</h2>
        <p>Mi·ªÅn T√¢y v·ªõi kh√¥ng kh√≠ trong l√†nh, c·∫£nh quan thi√™n nhi√™n xanh m√°t v√† nh·ªãp s·ªëng ch·∫≠m r√£i l√† ƒëi·ªÉm ƒë·∫øn l√Ω t∆∞·ªüng cho c√°c gia ƒë√¨nh c√≥ con nh·ªè. B√© s·∫Ω ƒë∆∞·ª£c h√≤a m√¨nh v√†o thi√™n nhi√™n, kh√°m ph√° nh·ªØng ƒëi·ªÅu m·ªõi l·∫° v√† h·ªçc h·ªèi v·ªÅ vƒÉn h√≥a ƒë·ªôc ƒë√°o c·ªßa v√πng ƒë·∫•t n√†y.</p>
        <ul>
            <li><strong>Kh√¥ng kh√≠ trong l√†nh:</strong> T·ªët cho h·ªá h√¥ h·∫•p v√† s·ª©c kh·ªèe c·ªßa b√©.</li>
            <li><strong>Tr·∫£i nghi·ªám th·ª±c t·∫ø:</strong> B√© ƒë∆∞·ª£c th·∫•y t·∫≠n m·∫Øt v∆∞·ªùn c√¢y tr√°i, ghe thuy·ªÅn, ch·ª£ n·ªïi.</li>
            <li><strong>·∫®m th·ª±c phong ph√∫:</strong> Nhi·ªÅu m√≥n ƒÉn ngon, d·ªÖ ti√™u h√≥a ph√π h·ª£p v·ªõi tr·∫ª nh·ªè.</li>
        </ul>
        <h2>2. Chu·∫©n b·ªã g√¨ khi ƒë∆∞a b√© ƒëi Mi·ªÅn T√¢y?</h2>
        <p>ƒê·ªÉ chuy·∫øn ƒëi ƒë∆∞·ª£c tr·ªçn v·∫πn, m·∫π c·∫ßn chu·∫©n b·ªã k·ªπ l∆∞·ª°ng m·ªôt v√†i th·ª© sau:</p>
        <h3>2.1. ƒê·ªì d√πng c√° nh√¢n cho b√©</h3>
        <p>Qu·∫ßn √°o tho·∫£i m√°i, m≈© r·ªông v√†nh, kem ch·ªëng n·∫Øng, thu·ªëc men c∆° b·∫£n (h·∫° s·ªët, ti√™u h√≥a), ƒë·ªì ch∆°i y√™u th√≠ch c·ªßa b√©.</p>
        <img src="https://images.unsplash.com/photo-1593538136582-45450f3840a1?q=80&w=1200" alt="Chu·∫©n b·ªã ƒë·ªì cho b√© ƒëi ch∆°i" />
        <h3>2.2. L·ªãch tr√¨nh ph√π h·ª£p</h3>
        <p>Kh√¥ng n√™n ch·ªçn l·ªãch tr√¨nh qu√° d√†y ƒë·∫∑c. ∆Øu ti√™n c√°c ƒëi·ªÉm ƒë·∫øn g·∫ßn g≈©i thi√™n nhi√™n, c√≥ kh√¥ng gian cho b√© vui ch∆°i. C√°c khu du l·ªãch sinh th√°i, v∆∞·ªùn c√¢y ƒÉn tr√°i l√† l·ª±a ch·ªçn tuy·ªát v·ªùi.</p>
        <h2>3. G·ª£i √Ω ƒëi·ªÉm ƒë·∫øn th√∫ v·ªã cho gia ƒë√¨nh c√≥ b√©</h2>
        <ul>
            <li><strong>L√†ng n·ªïi T√¢n L·∫≠p (Long An):</strong> Con ƒë∆∞·ªùng xuy√™n r·ª´ng tr√†m c·ªï t√≠ch, ch√®o thuy·ªÅn ng·∫Øm c·∫£nh.</li>
            <li><strong>V∆∞·ªùn tr√°i c√¢y C√°i M∆°n (B·∫øn Tre):</strong> B√© ƒë∆∞·ª£c t·ª± tay h√°i v√† th∆∞·ªüng th·ª©c tr√°i c√¢y t∆∞∆°i ngon.</li>
            <li><strong>Khu du l·ªãch M·ªπ Kh√°nh (C·∫ßn Th∆°):</strong> Nhi·ªÅu tr√≤ ch∆°i d√¢n gian, xem ƒëua heo, xi·∫øc kh·ªâ.</li>
        </ul>
        <p>Hy v·ªçng nh·ªØng chia s·∫ª n√†y s·∫Ω gi√∫p c√°c m·∫π c√≥ m·ªôt chuy·∫øn ƒëi mi·ªÅn T√¢y th·∫≠t vui v√† √Ω nghƒ©a c√πng b√© y√™u!</p>
    `,
    createdAt: "2025-06-02T10:00:00Z",
    viewCount: 1560,
    commentCount: 0, // S·∫Ω c·∫≠p nh·∫≠t t·ª´ staticComments
    averageRating: 4.2,
    author: "BTV MomUni",
    authorImage: "https://randomuser.me/api/portraits/women/8.jpg",
    images: [{
        url: "https://images.unsplash.com/photo-1506740717032-0818e79510e8?q=80&w=1200&auto=format&fit=crop",
        caption: "M·∫π v√† b√© kh√°m ph√° mi·ªÅn T√¢y"
    }],
    tags: ["Du L·ªãch Gia ƒê√¨nh", "Mi·ªÅn T√¢y", "M·∫π v√† B√©", "Tr·∫£i Nghi·ªám", "Kinh Nghi·ªám Du L·ªãch"],
};

const staticComments = [
    { _id: 'cmt1', name: 'M·∫π B·ªâm S·ªØa', content: 'B√†i vi·∫øt hay qu√°, m√¨nh ƒëang ƒë·ªãnh cho b√© nh√† m√¨nh ƒëi ch∆°i mi·ªÅn T√¢y. C·∫£m ∆°n MomUni!', createdAt: '2025-06-02T11:30:00Z', avatar: 'https://randomuser.me/api/portraits/women/10.jpg' },
    { _id: 'cmt2', name: 'Ba C·ªßa T√≠t', content: 'Th√¥ng tin r·∫•t h·ªØu √≠ch, ƒë·∫∑c bi·ªát l√† ph·∫ßn chu·∫©n b·ªã ƒë·ªì cho b√©. Like m·∫°nh!', createdAt: '2025-06-02T14:15:00Z', avatar: 'https://randomuser.me/api/portraits/men/10.jpg' },
    { _id: 'cmt3', name: 'Gia ƒê√¨nh Nh·ªè', content: 'Nh√¨n ·∫£nh ch·ª£ n·ªïi th√≠ch qu√°, ch·∫Øc ch·∫Øn s·∫Ω ƒë∆∞a c√°c con ƒëi tr·∫£i nghi·ªám.', createdAt: '2025-06-03T09:00:00Z', avatar: 'https://randomuser.me/api/portraits/women/11.jpg' },
];


// --- COMPONENTS ---
const PulsatingHeartsAnimation = ({ size = 30, motherHeartChar = "üíñ", childHeartChar = "üíó" }) => { /* ... Gi·ªØ nguy√™n ... */ };

// --- ‚ú® BLOG PAGE FOOTER (Kh√¥ng c√≥ Form) ‚ú® ---
const BlogPageFooter = () => {
    const theme = useTheme();
    return (
        <Box component="footer" sx={{
            backgroundColor: theme.palette.primary.dark, // S·ª≠ d·ª•ng m√†u t·ªëi h∆°n c·ªßa primary
            color: 'white',
            py: { xs: 5, md: 7 },
            mt: 8,
            borderTopLeftRadius: { xs: '20px', md: '30px' },
            borderTopRightRadius: { xs: '20px', md: '30px' },
            boxShadow: '0 -10px 25px rgba(0,0,0,0.15)',
        }}>
            <Container maxWidth="lg">
                <Grid container spacing={4} justifyContent="space-between" alignItems="flex-start">
                    <Grid item xs={12} md={4} sx={{ textAlign: { xs: 'center', md: 'left' } }}>
                        <Stack direction="row" alignItems="center" spacing={1.5} sx={{ mb: 2, justifyContent: { xs: 'center', md: 'flex-start' } }}>
                            <PulsatingHeartsAnimation size={36} motherHeartChar="ü§ç" childHeartChar={theme.palette.secondary.light} />
                            <Typography variant="h4" sx={{ fontFamily: '"Lora", serif', color: 'white' }}>MomUni</Typography>
                        </Stack>
                        <Typography variant="body2" sx={{ color: alpha(theme.palette.common.white, 0.85), pr: { md: 3 }, lineHeight: 1.7 }}>
                            ƒê·ªìng h√†nh c√πng m·∫π tr√™n m·ªçi n·∫ªo ƒë∆∞·ªùng, chia s·∫ª ki·∫øn th·ª©c, lan t·ªèa y√™u th∆∞∆°ng.
                        </Typography>
                    </Grid>

                    <Grid item xs={6} sm={3} md={2.5}>
                        <Typography variant="h6" sx={{ mb: 2, color: 'white', fontWeight: 600 }}>Kh√°m Ph√°</Typography>
                        <Stack spacing={1.2}>
                            <Link href="/blog" color="inherit" underline="hover" sx={{ opacity: 0.85, '&:hover': { opacity: 1, color: theme.palette.secondary.light } }}>Blog</Link>
                            <Link href="/chu-de" color="inherit" underline="hover" sx={{ opacity: 0.85, '&:hover': { opacity: 1, color: theme.palette.secondary.light } }}>Ch·ªß ƒê·ªÅ</Link>
                            <Link href="/hoi-dap" color="inherit" underline="hover" sx={{ opacity: 0.85, '&:hover': { opacity: 1, color: theme.palette.secondary.light } }}>H·ªèi ƒê√°p</Link>
                            <Link href="/cong-dong" color="inherit" underline="hover" sx={{ opacity: 0.85, '&:hover': { opacity: 1, color: theme.palette.secondary.light } }}>C·ªông ƒê·ªìng</Link>
                        </Stack>
                    </Grid>
                    <Grid item xs={6} sm={3} md={2.5}>
                        <Typography variant="h6" sx={{ mb: 2, color: 'white', fontWeight: 600 }}>V·ªÅ MomUni</Typography>
                        <Stack spacing={1.2}>
                            <Link href="/about" color="inherit" underline="hover" sx={{ opacity: 0.85, '&:hover': { opacity: 1, color: theme.palette.secondary.light } }}>Gi·ªõi Thi·ªáu</Link>
                            <Link href="/contact" color="inherit" underline="hover" sx={{ opacity: 0.85, '&:hover': { opacity: 1, color: theme.palette.secondary.light } }}>Li√™n H·ªá</Link>
                            <Link href="/dieu-khoan" color="inherit" underline="hover" sx={{ opacity: 0.85, '&:hover': { opacity: 1, color: theme.palette.secondary.light } }}>ƒêi·ªÅu Kho·∫£n</Link>
                            <Link href="/bao-mat" color="inherit" underline="hover" sx={{ opacity: 0.85, '&:hover': { opacity: 1, color: theme.palette.secondary.light } }}>B·∫£o M·∫≠t</Link>
                        </Stack>
                    </Grid>
                    <Grid item xs={12} sm={6} md={3}>
                        <Typography variant="h6" sx={{ mb: 2, color: 'white', fontWeight: 600 }}>K·∫øt n·ªëi v·ªõi ch√∫ng t√¥i</Typography>
                        <Stack direction="row" spacing={1.5}>
                            <IconButton href="#" aria-label="Facebook" sx={{ color: 'white', bgcolor: alpha(theme.palette.common.white, 0.1), '&:hover': { bgcolor: alpha(theme.palette.common.white, 0.25), transform: 'translateY(-2px)' } }}><Facebook /></IconButton>
                            <IconButton href="#" aria-label="Instagram" sx={{ color: 'white', bgcolor: alpha(theme.palette.common.white, 0.1), '&:hover': { bgcolor: alpha(theme.palette.common.white, 0.25), transform: 'translateY(-2px)' } }}><Instagram /></IconButton>
                            <IconButton href="#" aria-label="Twitter" sx={{ color: 'white', bgcolor: alpha(theme.palette.common.white, 0.1), '&:hover': { bgcolor: alpha(theme.palette.common.white, 0.25), transform: 'translateY(-2px)' } }}><Twitter /></IconButton>
                        </Stack>
                    </Grid>
                </Grid>
                <Divider sx={{ my: 4, borderColor: alpha(theme.palette.common.white, 0.25) }} />
                <Typography variant="body2" sx={{ color: alpha(theme.palette.common.white, 0.85) }} align="center">
                    ¬© {new Date().getFullYear()} MomUni. With love and care for every mom and baby.
                </Typography>
            </Container>
        </Box>
    );
};


export default function BlogDetailMUI() {
    const theme = useTheme();
    const { slug } = useParams();

    const [blog, setBlog] = useState(null);
    const [comments, setComments] = useState([]);
    const [toc, setToc] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const [newComment, setNewComment] = useState("");
    const [commenterName, setCommenterName] = useState("");
    const [isSubmittingComment, setIsSubmittingComment] = useState(false);

    const [userRating, setUserRating] = useState(0);
    const [currentBlogRating, setCurrentBlogRating] = useState(0);
    const [ratingSubmitted, setRatingSubmitted] = useState(false);

    const [commentPage, setCommentPage] = useState(1);
    const commentsPerPage = 3;

    useEffect(() => {
        setLoading(true);
        setTimeout(() => {
            const fetchedBlog = { ...staticBlog, averageRating: staticBlog.averageRating || 0, commentCount: staticComments.length };
            setBlog(fetchedBlog);
            setCurrentBlogRating(fetchedBlog.averageRating);
            setComments(staticComments.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)));

            if (fetchedBlog.content) {
                const parser = new DOMParser();
                const doc = parser.parseFromString(fetchedBlog.content, "text/html");
                const headings = Array.from(doc.querySelectorAll("h2, h3")).map((h, index) => {
                    const id = `section-${h.tagName.toLowerCase()}-${index}`;
                    h.setAttribute('id', id);
                    return {
                        id: id,
                        text: h.textContent?.trim() || "M·ª•c kh√¥ng t√™n",
                        level: h.tagName.toLowerCase(),
                    };
                });
                setToc(headings);
                setBlog(prev => ({ ...prev, contentWithIds: doc.body.innerHTML }));
            } else {
                setBlog(prev => ({ ...prev, contentWithIds: "<p>Kh√¥ng c√≥ n·ªôi dung.</p>" }));
            }
            setLoading(false);
        }, 1000);
    }, [slug]);


    const handleCommentSubmit = async (e) => {
        e.preventDefault();
        if (!newComment.trim() || !commenterName.trim()) {
            // Replace alert with Snackbar
            // alert("Vui l√≤ng nh·∫≠p c·∫£ t√™n v√† b√¨nh lu·∫≠n."); 
            return;
        }
        setIsSubmittingComment(true);
        const tempId = `temp-${Date.now()}`;
        const tempComment = {
            _id: tempId, name: commenterName, content: newComment, createdAt: new Date().toISOString(), avatar: 'https://i.pravatar.cc/40?u=' + commenterName
        };
        setComments([tempComment, ...comments]);
        setCommentPage(1);
        setNewComment("");
        setCommenterName("");

        await new Promise(resolve => setTimeout(resolve, 1000));
        const savedComment = { ...tempComment, _id: `real-${Date.now()}` };
        setComments(prev => prev.map(c => c._id === tempId ? savedComment : c));
        setBlog(prev => ({ ...prev, commentCount: (prev.commentCount || 0) + 1 }));
        setIsSubmittingComment(false);
        // Show success Snackbar
    };

    const handleRatingSubmit = async () => {
        if (userRating === 0 || ratingSubmitted) return;
        setRatingSubmitted(true);
        await new Promise(resolve => setTimeout(resolve, 1000));
        const newAverageRating = ((currentBlogRating * (blog.viewCount || 1)) + userRating) / ((blog.viewCount || 1) + 1);
        setCurrentBlogRating(parseFloat(newAverageRating.toFixed(1)));
        setBlog(prev => ({ ...prev, averageRating: parseFloat(newAverageRating.toFixed(1)) }));
        // Show success Snackbar
    };

    const totalCommentPages = Math.ceil(comments.length / commentsPerPage);
    const currentDisplayComments = comments.slice((commentPage - 1) * commentsPerPage, commentPage * commentsPerPage);

    if (loading) return <Container sx={{ py: 5, textAlign: 'center' }}><Typography variant="h5">ƒêang t·∫£i b√†i vi·∫øt...</Typography></Container>;
    if (error || !blog) return <Container sx={{ py: 5, textAlign: 'center' }}><Alert severity="error">{error || "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt."}</Alert></Container>;

    return (
        <ThemeProvider theme={elegantTheme}>
            <CssBaseline />
            {/* Header kh√¥ng ƒë∆∞·ª£c render ·ªü ƒë√¢y, gi·∫£ s·ª≠ n√≥ l√† layout chung */}
            <Container maxWidth="lg" sx={{ py: 4 }}>
                <Breadcrumbs aria-label="breadcrumb" sx={{ mb: 3, fontSize: '0.9rem' }}>
                    <Link component={RouterLink} underline="hover" color="inherit" to="/">Trang ch·ªß</Link>
                    <Link component={RouterLink} underline="hover" color="inherit" to="/blog">Blog</Link>
                    <Typography color="text.primary" sx={{ fontWeight: 500 }}>{blog.title || "Chi ti·∫øt b√†i vi·∫øt"}</Typography>
                </Breadcrumbs>

                <Grid container spacing={5}> {/* TƒÉng spacing gi·ªØa main content v√† sidebar */}
                    {/* Main Content Column */}
                    <Grid item xs={12} md={8}>
                        <MotionPaper
                            elevation={0} // B·ªè elevation m·∫∑c ƒë·ªãnh c·ªßa Paper, d√πng border
                            sx={{ border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`, p: { xs: 2.5, md: 4 } }}
                            variants={sectionVariants}
                            initial="hidden"
                            animate="visible"
                        >
                            <Typography variant="h1" component="h1" gutterBottom>
                                {blog.title}
                            </Typography>

                            <Stack direction="row" spacing={1.5} sx={{ my: 3, color: 'text.secondary', alignItems: 'center', flexWrap: 'wrap' }}>
                                <Stack direction="row" alignItems="center" spacing={0.5}><Avatar src={blog.authorImage} sx={{ width: 28, height: 28, fontSize: '0.8rem' }}>{blog.author?.[0]}</Avatar> <Typography variant="caption" sx={{ fontWeight: 600 }}>{blog.author}</Typography></Stack>
                                <Stack direction="row" alignItems="center" spacing={0.5}><CalendarTodayIcon sx={{ fontSize: '1rem' }} /> <Typography variant="caption">{new Date(blog.createdAt).toLocaleDateString("vi-VN", { day: '2-digit', month: '2-digit', year: 'numeric' })}</Typography></Stack>
                                {/* <Stack direction="row" alignItems="center" spacing={0.5}><VisibilityIcon sx={{ fontSize: '1rem' }} /> <Typography variant="caption">{blog.viewCount || 0} l∆∞·ª£t xem</Typography></Stack> */}
                                <Stack direction="row" alignItems="center" spacing={0.5}><CommentIcon sx={{ fontSize: '1rem' }} /> <Typography variant="caption">{comments.length} b√¨nh lu·∫≠n</Typography></Stack>
                                <Stack direction="row" alignItems="center" spacing={0.5}><StarIcon sx={{ fontSize: '1.1rem', color: 'warning.main' }} /> <Typography variant="caption" sx={{ fontWeight: 500 }}>{currentBlogRating.toFixed(1)}/5</Typography></Stack>
                            </Stack>

                            {blog.images && blog.images.length > 0 && (
                                <Box sx={{ mb: 3, borderRadius: '12px', overflow: 'hidden', boxShadow: `0 8px 20px ${alpha(theme.palette.primary.main, 0.15)}` }}>
                                    <CardMedia component="img" image={blog.images[0].url} alt={blog.images[0].caption || blog.title} sx={{ width: '100%', maxHeight: '550px', objectFit: 'cover' }} />
                                </Box>
                            )}

                            <Box className="blog-post-content" dangerouslySetInnerHTML={{ __html: blog.contentWithIds || blog.content || "" }} sx={{
                                '& h2': { ...elegantTheme.typography.h2, color: elegantTheme.palette.primary.dark },
                                '& h3': { ...elegantTheme.typography.h3, color: alpha(elegantTheme.palette.text.primary, 0.85) },
                                '& p': { ...elegantTheme.typography.body1, mb: 2 },
                                '& a': { color: 'secondary.main', textDecoration: 'underline', '&:hover': { color: 'secondary.dark' } },
                                '& img': { maxWidth: '100%', height: 'auto', borderRadius: '12px', display: 'block', my: 3, boxShadow: 3 },
                                '& ul, & ol': { pl: 3, my: 2 }, '& li': { mb: 1, lineHeight: 1.7, color: 'text.secondary' },
                                '& strong': { fontWeight: 600, color: 'text.primary' }
                            }} />

                            {blog.tags && blog.tags.length > 0 && (
                                <Box sx={{ mt: 4, mb: 3 }}>
                                    <Typography variant="h6" gutterBottom sx={{ fontWeight: 600 }}>Th·∫ª:</Typography>
                                    <Stack direction="row" spacing={1} useFlexGap flexWrap="wrap">
                                        {blog.tags.map((tag, index) => (
                                            <Chip key={index} label={tag} component="a" href={`/blog/tag/${tag.toLowerCase()}`} clickable variant="outlined" size="medium" sx={{ borderColor: alpha(theme.palette.primary.main, 0.5), color: theme.palette.primary.dark, '&:hover': { backgroundColor: alpha(theme.palette.primary.main, 0.05) } }} />
                                        ))}
                                    </Stack>
                                </Box>
                            )}
                            <Divider sx={{ my: 4, borderColor: alpha(theme.palette.primary.main, 0.2) }} />

                            <MotionBox variants={itemVariants} sx={{ textAlign: 'center', p: { xs: 2, md: 3 }, backgroundColor: alpha(theme.palette.primary.light, 0.15), borderRadius: '12px' }}>
                                <Typography variant="h6" gutterBottom sx={{ fontWeight: 600 }}>B·∫°n th·∫•y b√†i vi·∫øt n√†y th·∫ø n√†o?</Typography>
                                <Rating
                                    name="blog-post-rating"
                                    value={userRating}
                                    onChange={(event, newValue) => { if (!ratingSubmitted) setUserRating(newValue); }}
                                    readOnly={ratingSubmitted}
                                    size="large"
                                    emptyIcon={<StarIcon style={{ opacity: 0.4 }} fontSize="inherit" />}
                                    sx={{ mb: 2, '& .MuiRating-iconFilled': { color: '#FFB400' } }} // M√†u v√†ng cho sao
                                />
                                {ratingSubmitted ? (
                                    <Typography color="success.main" variant="subtitle1" sx={{ fontWeight: 600 }}>C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°!</Typography>
                                ) : (
                                    <Button variant="contained" onClick={handleRatingSubmit} disabled={userRating === 0 || ratingSubmitted} size="medium" sx={{ fontWeight: 600 }}>
                                        G·ª≠i ƒë√°nh gi√°
                                    </Button>
                                )}
                            </MotionBox>
                        </MotionPaper>

                        {/* Comment Section */}
                        <MotionPaper elevation={0} sx={{ mt: 4, border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}` }} variants={sectionVariants}>
                            <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, borderBottom: `1px solid ${alpha(theme.palette.divider, 0.5)}`, pb: 2, mb: 2 }}>
                                <CommentIcon sx={{ verticalAlign: 'middle', mr: 1, color: 'primary.main' }} />B√¨nh lu·∫≠n ({comments.length})
                            </Typography>
                            <Box component="form" onSubmit={handleCommentSubmit} sx={{ my: 3 }}>
                                <Grid container spacing={2}>
                                    <Grid item xs={12} sm={6}>
                                        <TextField fullWidth label="T√™n c·ªßa b·∫°n" name="commenterName" value={commenterName} onChange={(e) => setCommenterName(e.target.value)} required />
                                    </Grid>
                                    <Grid item xs={12}>
                                        <TextField fullWidth label="Vi·∫øt b√¨nh lu·∫≠n..." name="newComment" value={newComment} onChange={(e) => setNewComment(e.target.value)} required multiline rows={3} />
                                    </Grid>
                                    <Grid item xs={12}>
                                        <LoadingButton type="submit" loading={isSubmittingComment} variant="contained" endIcon={<SendIcon />} size="medium" sx={{ fontWeight: 600 }}>
                                            G·ª≠i b√¨nh lu·∫≠n
                                        </LoadingButton>
                                    </Grid>
                                </Grid>
                            </Box>
                            <Divider sx={{ mb: 2.5 }} />
                            {currentDisplayComments.length > 0 ? (
                                <List sx={{ width: '100%', bgcolor: 'background.paper', p: 0 }}>
                                    {currentDisplayComments.map((comment, index) => (
                                        <React.Fragment key={comment._id || `comment-${index}`}>
                                            <ListItem alignItems="flex-start" sx={{ px: 0, py: 1.5 }}>
                                                <ListItemAvatar sx={{ minWidth: 50 }}>
                                                    <Avatar src={comment.avatar || undefined} sx={{ bgcolor: 'primary.light', color: 'primary.dark' }}>{comment.name ? comment.name.charAt(0).toUpperCase() : 'A'}</Avatar>
                                                </ListItemAvatar>
                                                <ListItemText
                                                    primary={<Typography sx={{ fontWeight: 'bold', color: 'text.primary', mb: 0.3 }}>{comment.name || "·∫®n danh"}</Typography>}
                                                    secondary={
                                                        <>
                                                            <Typography sx={{ display: 'block', whiteSpace: 'pre-wrap', wordBreak: 'break-word', color: 'text.primary', fontSize: '0.95rem' }} component="span" variant="body2">
                                                                {comment.content || "..."}
                                                            </Typography>
                                                            <Typography variant="caption" color="text.secondary" sx={{ mt: 0.5, display: 'block' }}>
                                                                {new Date(comment.createdAt).toLocaleString('vi-VN', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })}
                                                            </Typography>
                                                        </>
                                                    }
                                                />
                                            </ListItem>
                                            {index < currentDisplayComments.length - 1 && <Divider variant="inset" component="li" />}
                                        </React.Fragment>
                                    ))}
                                </List>
                            ) : (
                                <Alert severity="info" sx={{ mt: 2, justifyContent: 'center' }}>Ch∆∞a c√≥ b√¨nh lu·∫≠n. H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n!</Alert>
                            )}
                            {totalCommentPages > 1 && (
                                <Stack sx={{ mt: 3, alignItems: 'center' }}>
                                    <Pagination count={totalCommentPages} page={commentPage} onChange={(e, val) => setCommentPage(val)} color="primary" />
                                </Stack>
                            )}
                        </MotionPaper>
                    </Grid>

                    {/* Right Sidebar (TOC) */}
                    <Grid item xs={12} md={4}>
                        <MotionBox sx={{ position: 'sticky', top: '88px' }} variants={sectionVariants} initial="hidden" animate="visible" transition={{ delay: 0.1 }}>
                            {toc.length > 0 && (
                                <Paper elevation={2} sx={{ p: 2.5, border: `1px solid ${alpha(theme.palette.secondary.main, 0.3)}`, backgroundColor: alpha(theme.palette.secondary.light, 0.1) }}>
                                    <Typography variant="h6" gutterBottom sx={{ fontWeight: 600, color: 'secondary.dark', borderBottom: `2px solid ${theme.palette.secondary.main}`, pb: 1, mb: 1.5 }}>M·ª•c l·ª•c b√†i vi·∫øt</Typography>
                                    <List dense component="nav" sx={{ maxHeight: 'calc(100vh - 120px)', overflowY: 'auto' }}>
                                        {toc.map((item) => (
                                            <ListItem key={item.id} disablePadding sx={{ '&:hover': { bgcolor: alpha(theme.palette.secondary.main, 0.1), borderRadius: '4px' } }}>
                                                <Link href={`#${item.id}`} underline="none" sx={{ color: item.level === 'h3' ? 'text.secondary' : 'text.primary', width: '100%', py: 0.7, pl: item.level === 'h3' ? 2.5 : 0.5, display: 'block', fontWeight: item.level === 'h2' ? 500 : 400, fontSize: item.level === 'h2' ? '0.95rem' : '0.85rem', transition: 'color 0.2s', '&:hover': { color: 'secondary.dark' } }}>
                                                    {item.text}
                                                </Link>
                                            </ListItem>
                                        ))}
                                    </List>
                                </Paper>
                            )}
                        </MotionBox>
                    </Grid>
                </Grid>
            </Container>
            {/* <BlogPageFooter /> */}
        </ThemeProvider>
    );
}

