import React, { useRef } from 'react';
import {
    Typography,
    Container, Box,
    Chip,
    useTheme, alpha, Avatar, Button
} from '@mui/material';
import { motion, useScroll, useTransform } from 'framer-motion';
import {
    PregnantWoman,
    BabyChangingStation,
    Fastfood,
    DirectionsWalk,
    Psychology,
    Cottage,
    ArrowDownward
} from '@mui/icons-material';

// --- D·ªÆ LI·ªÜU ---
const journeyData = [
    { time: "3 Th√°ng ƒë·∫ßu", icon: <PregnantWoman />, title: "Mang thai di·ªáu k·ª≥", description: "ChƒÉm s√≥c b·∫£n th√¢n, l√†m quen v·ªõi nh·ªØng thay ƒë·ªïi ƒë·∫ßu ti√™n c·ªßa c∆° th·ªÉ." },
    { time: "0-6 Th√°ng", icon: <BabyChangingStation />, title: "Ch√†o ƒë√≥n S∆° sinh", description: "Ki·∫øn th·ª©c v·ªÅ gi·∫•c ng·ªß, dinh d∆∞·ª°ng v√† s·ª± g·∫Øn k·∫øt nh·ªØng ng√†y ƒë·∫ßu." },
    { time: "6-12 Th√°ng", icon: <Fastfood />, title: "B√© t·∫≠p ƒÇn d·∫∑m", description: "X√¢y d·ª±ng th·ª±c ƒë∆°n ƒëa d·∫°ng, gi√∫p b√© kh√°m ph√° th·∫ø gi·ªõi ·∫©m th·ª±c." },
    { time: "1-2 Tu·ªïi", icon: <DirectionsWalk />, title: "B∆∞·ªõc ch√¢n ƒë·∫ßu ƒë·ªùi", description: "ƒê·ªìng h√†nh c√πng con trong giai ƒëo·∫°n ph√°t tri·ªÉn th·ªÉ ch·∫•t v√† ng√¥n ng·ªØ." },
    { time: "2-3 Tu·ªïi", icon: <Psychology />, title: "Kh·ªßng ho·∫£ng tu·ªïi l√™n 2", description: "Th·∫•u hi·ªÉu v√† ƒë·ªãnh h∆∞·ªõng c·∫£m x√∫c, t√≠nh c√°ch c·ªßa con." },
    { time: "3+ Tu·ªïi", icon: <Cottage />, title: "B√© ƒë·∫øn nh√† tr·∫ª", description: "Chu·∫©n b·ªã t√¢m l√Ω v√† k·ªπ nƒÉng cho con b∆∞·ªõc v√†o m√¥i tr∆∞·ªùng m·ªõi." },
];

// --- COMPONENT TH·∫∫ H√ÄNH TR√åNH (QUAN TR·ªåNG) ---
// M·ªói th·∫ª s·∫Ω t·ª± qu·∫£n l√Ω animation c·ªßa ch√≠nh n√≥
const JourneyCard = ({ index, data, theme }) => {
    const ref = useRef(null); // Ref ri√™ng cho m·ªói th·∫ª

    // THEO D√ïI SCROLL C·ª¶A CH√çNH TH·∫∫ N√ÄY
    const { scrollYProgress } = useScroll({
        target: ref,
        offset: ["start end", "end start"] // B·∫Øt ƒë·∫ßu khi top th·∫ª ch·∫°m ƒë√°y m√†n h√¨nh, k·∫øt th√∫c khi ƒë√°y th·∫ª ch·∫°m top m√†n h√¨nh
    });

    // Bi·∫øn ƒë·ªïi animation d·ª±a tr√™n ti·∫øn tr√¨nh scroll c·ªßa th·∫ª
    // Khi th·∫ª ·ªü gi·ªØa m√†n h√¨nh (progress = 0.5), hi·ªáu ·ª©ng s·∫Ω ƒë·∫°t ƒë·ªânh
    const scale = useTransform(scrollYProgress, [0, 0.4, 0.6, 1], [0.7, 1, 1, 0.7]);
    const opacity = useTransform(scrollYProgress, [0, 0.4, 0.6, 1], [0.4, 1, 1, 0.4]);
    const x = useTransform(scrollYProgress, [0, 0.4, 0.6, 1],
        index % 2 === 0 ? ['-100%', '0%', '0%', '-100%'] : ['100%', '0%', '0%', '100%']
    );
    const boxShadow = useTransform(scrollYProgress,
        [0.3, 0.5, 0.7],
        [`0px 0px 0px ${alpha(theme.palette.primary.main, 0)}`, `0px 0px 40px ${alpha(theme.palette.primary.main, 0.7)}`, `0px 0px 0px ${alpha(theme.palette.primary.main, 0)}`]
    );

    return (
        <Box
            ref={ref}
            sx={{
                display: 'flex',
                justifyContent: index % 2 === 0 ? 'flex-start' : 'flex-end',
                mb: 20, // Kho·∫£ng c√°ch gi·ªØa c√°c th·∫ª
                width: '100%',
            }}
        >
            <motion.div
                style={{
                    scale,
                    opacity,
                    x,
                    boxShadow,
                    width: 'calc(50% - 40px)', // Th·∫ª chi·∫øm g·∫ßn 1 n·ª≠a m√†n h√¨nh
                }}
            >
                <Box
                    sx={{
                        p: { xs: 2, md: 3 },
                        borderRadius: '16px',
                        bgcolor: 'background.paper',
                        border: '1px solid',
                        borderColor: alpha(theme.palette.grey[500], 0.2),
                        textAlign: 'center',
                    }}
                >
                    <Chip
                        avatar={<Avatar sx={{ bgcolor: 'primary.main' }}>{React.cloneElement(data.icon, { sx: { color: '#fff' } })}</Avatar>}
                        label={data.time}
                        sx={{ mb: 2, fontSize: '1rem', fontWeight: 600, p: 2.2 }}
                    />
                    <Typography variant="h5" color="text.primary" sx={{ fontWeight: 600 }}>
                        {data.title}
                    </Typography>
                    <Typography variant="body1" color="text.secondary" sx={{ mt: 1 }}>
                        {data.description}
                    </Typography>
                </Box>
            </motion.div>
        </Box>
    );
};


// --- COMPONENT CH√çNH ---
export const MotherhoodJourneySection = () => {
    const theme = useTheme();
    const journeyContainerRef = useRef(null);

    const handleStartClick = () => {
        journeyContainerRef.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });
    };

    return (
        <Box sx={{ backgroundColor: theme.palette.background.default, color: 'text.primary' }}>
            {/* --- Section M·ªü ƒë·∫ßu --- */}
            <Container
                maxWidth="md"
                sx={{
                    minHeight: '80vh', display: 'flex', flexDirection: 'column',
                    alignItems: 'center', justifyContent: 'center', textAlign: 'center', py: 12
                }}
            >
                <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.8 }}>
                    <Typography variant="h2" gutterBottom sx={{ fontWeight: 700 }}>
                        Kh√°m ph√° H√†nh Tr√¨nh L√†m M·∫π
                    </Typography>
                    <Typography variant="h6" color="text.secondary" sx={{ mb: 4, fontWeight: 400, maxWidth: '600px' }}>
                        M·ªói b∆∞·ªõc ƒëi ƒë·ªÅu l√† m·ªôt k·ª≥ di·ªáu. H√£y c√πng ch√∫ng t√¥i l·∫≠t m·ªü t·ª´ng trang trong cu·ªën nh·∫≠t k√Ω thi√™ng li√™ng n√†y.
                    </Typography>
                    <Button
                        variant="contained" size="large"
                        endIcon={<ArrowDownward />} onClick={handleStartClick}
                    >
                        B·∫Øt ƒë·∫ßu h√†nh tr√¨nh
                    </Button>
                </motion.div>
            </Container>

            {/* --- Section H√†nh tr√¨nh Ch√≠nh --- */}
            <Box ref={journeyContainerRef} sx={{ position: 'relative', py: 20 }}>
                {/* ƒê∆Ø·ªúNG ƒêI C·ªê ƒê·ªäNH ·ªû GI·ªÆA */}
                <Box sx={{
                    position: 'absolute',
                    top: 0, bottom: 0,
                    left: '50%',
                    transform: 'translateX(-50%)',
                    width: '4px',
                    bgcolor: alpha(theme.palette.grey[500], 0.3),
                    zIndex: 0,
                }}>
                    <Box sx={{
                        width: 24, height: 24, borderRadius: '50%',
                        bgcolor: 'secondary.main',
                        position: 'sticky', // D√≠nh v√†o gi·ªØa m√†n h√¨nh
                        top: '50%',
                        transform: 'translateY(-50%)',
                        display: 'flex', alignItems: 'center', justifyContent: 'center'
                    }}>
                        <span role="img" aria-label="marker">üë∂</span>
                    </Box>
                </Box>

                {/* CONTAINER CH·ª®A C√ÅC TH·∫∫ */}
                <Container maxWidth="md">
                    {journeyData.map((item, index) => (
                        <JourneyCard
                            key={item.title}
                            index={index}
                            data={item}
                            theme={theme}
                        />
                    ))}
                </Container>
            </Box>
        </Box>
    );
};